import pandas as pd
import numpy as np
from pyod.models.abod import ABOD
from pyod.models.cblof import CBLOF
from pyod.models.feature_bagging import FeatureBagging
from pyod.models.hbos import HBOS
from pyod.models.iforest import IForest
from pyod.models.knn import KNN
from pyod.models.lof import LOF
from sklearn.preprocessing import MinMaxScaler
from scipy.io import arff
import matplotlib.pyplot as plt
from scipy import stats
import matplotlib.font_manager
import seaborn as sns



data = arff.loadarff('seismic-bumps.arff')
df=pd.DataFrame(data[0])
df['gpuls'].describe()

plt.scatter(range(df.shape[0]), np.sort(df['gdenergy'])
plt.ylabel('gdenergy')
plt.title("Seismic Energy")
sns.despine()

sns.distplot(df['gdenergy'])
plt.title("Occurrences of Pulses")
sns.despine()

print("Skewness: %f" % df['gdenergy'].skew())
print("Kurtosis: %f" % df['gdenergy'].kurt())

isolation_forest = IForest(n_estimators=100)
isolation_forest.fit(df['gdenergy'].values.reshape(-1, 1))
xx = np.linspace(df['gdenergy'].min(), df['gdenergy'].max(), len(df)).reshape(-1,1)
anomaly_score = isolation_forest.decision_function(xx)
outlier = isolation_forest.predict(xx)
plt.figure(figsize=(10,4))
plt.plot(xx, anomaly_score, label='anomaly score')
plt.fill_between(xx.T[0], np.min(anomaly_score), np.max(anomaly_score),
                 where=outlier==-1,color='r',alpha=.4,label='outlier region')
                                    
plt.legend()
plt.ylabel('anomaly score')
plt.xlabel('energy')
plt.show();



plt.scatter(range(df.shape[0]), np.sort(df['gdpuls'].values))
plt.xlabel('index')
plt.ylabel('gdpuls')
plt.title("Seismic Pulses")
sns.despine()

sns.distplot(df['gdenergy'])
plt.title("Seismic Energy Output")
sns.despine()


isolation_forest = IForest(n_estimators=100)
isolation_forest.fit(df['gdpuls'].values.reshape(-1, 1))
xx = np.linspace(df['gdpuls'].min(), df['gdpuls'].max(), len(df)).reshape(-1,1)
anomaly_score = isolation_forest.decision_function(xx)
outlier = isolation_forest.predict(xx)
plt.figure(figsize=(10,4))
plt.plot(xx, anomaly_score, label='anomaly score')
plt.fill_between(xx.T[0], np.min(anomaly_score), np.max(anomaly_score),
                 where=outlier==-1,color='r',alpha=.4,label='outlier region')
                                    
plt.legend()
plt.ylabel('anomaly score')
plt.xlabel('gdpuls')
plt.show();

df['gdpuls'].describe()
